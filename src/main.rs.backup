use password_cracker_rs::password_attack::*;
use password_cracker_rs::Hash::Sha2::*;
use sha2::{Digest, Sha256};
use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader};
use std::process::exit;

use std::time::Instant;

fn main() {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        println!("Invalid amount of arguments!");
        println!("Example: cargo run <sha256 hash>");
        exit(1);
    }

    let wanted_hash: &str = &args[1];
    let password_file = "./passwordlist/passwordlist-1000000.txt";
    let mut attempts = 1;

    println!("Attempting to crack: {}!\n", wanted_hash);

    let password_list = File::open(password_file).unwrap();
    let reader = BufReader::new(password_list);

    let time_start = Instant::now();
    let reader: Vec<String> = reader
        .lines()
        .map(|line| line.expect("Failed to read line"))
        .collect();
    let result = dictionary_attack(wanted_hash, "sha512", &reader);
    let time_end = Instant::now();
    let duration = time_end - time_start;

    /*
    for line in reader.lines() {
        let line = line.unwrap();
        let password = line.trim();
        let password_hash = format!("{:x}", Sha256::digest(&password));

        println!("[{}] {} == {}", attempts, password, password_hash,);
        if compare_sha2(wanted_hash, password, sha256) {
            println!(
                "Password hash found after {} attempts! {} hashes to {}!",
                attempts, password, password_hash
            );
            exit(0);
        }

        attempts += 1;
    }
    println!("Passwrod hash not found!");
    */

    println!("{}", wanted_hash);
    println!("{:?}", args);
    println!("{:?}", result);
    println!("Time taken: {} milliseconds", duration.as_millis());
    println!(
        "Time taken: {} seconds",
        duration.as_millis() as f64 / 1000.0
    );
}
